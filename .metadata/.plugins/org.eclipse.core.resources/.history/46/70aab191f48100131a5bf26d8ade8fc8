package edu.csd;

import java.net.URISyntaxException;
import java.security.InvalidKeyException;
import java.util.ArrayList;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import com.microsoft.windowsazure.services.core.storage.CloudStorageAccount;
import com.microsoft.windowsazure.services.core.storage.StorageException;
import com.microsoft.windowsazure.services.queue.client.CloudQueue;
import com.microsoft.windowsazure.services.queue.client.CloudQueueClient;
import com.microsoft.windowsazure.services.queue.client.CloudQueueMessage;
import com.microsoft.windowsazure.services.table.client.CloudTableClient;
import com.microsoft.windowsazure.services.table.client.TableConstants;
import com.microsoft.windowsazure.services.table.client.TableOperation;
import com.microsoft.windowsazure.services.table.client.TableQuery;
import com.microsoft.windowsazure.services.table.client.TableQuery.Operators;
import com.microsoft.windowsazure.services.table.client.TableQuery.QueryComparisons;

public class DatasetUpdater {
	public static final String storageConnectionString = "UseDevelopmentStorage=true";
	private final static String insertionQueue = "insertionqueue";
	private static List<Integer> insertionIdsList = new ArrayList<>();
	private static String datasetName;
	private static List<PriorityIndexValue> priorityIndex;
	private final static String priorityIndexTable = "priorityindex";
	private static CloudQueue queue;

	public static void main(String[] args) {
		initialize();
		priorityIndex = new ArrayList<>();

		while (true) {
			try {
				CloudQueueMessage message = queue.retrieveMessage();
				if (message != null) {
					queue.deleteMessage(message);
					String json = message.getMessageContentAsString();

					// parse json string
					Object obj = JSONValue.parse(json);
					JSONObject jsonObject = (JSONObject) obj;
					datasetName = (String) jsonObject.get("dataset");
					String jsonIdList = (String) jsonObject.get("idlist");

					obj = JSONValue.parse(jsonIdList);
					JSONArray array = (JSONArray) obj;
					for (int i = 0; i < array.size(); i++) {
						insertionIdsList.add((int) array.get(i));
					}

					retrieveThePriorityIndexer();

					insertImageDescriptorVector();

				}
			} catch (StorageException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private static void insertImageDescriptorVector() {
		for (int i = 0; i < insertionIdsList.size(); i++) {
			DescriptorVectorEntity entity = retrieveDescriptorVector(insertionIdsList
					.get(i));
			List<GlobalDescriptorVectorEntity> candidateEntities = retrieveCandidateEntities(entity);
			
		}
	}

	private static List<GlobalDescriptorVectorEntity> retrieveCandidateEntities(
			DescriptorVectorEntity entity) {
		String vector = entity.getVector();
		String[] splitVector = vector.split(",");
		// Retrieve storage account from connection-string
		CloudStorageAccount storageAccount;
		List<GlobalDescriptorVectorEntity> entitiesList = new ArrayList<>();
		try {
			storageAccount = CloudStorageAccount.parse(storageConnectionString);
			// Create the table client.
			CloudTableClient tableClient = storageAccount
					.createCloudTableClient();

			// Create a filter condition where the partition key is "Smith".
			String partitionFilter = TableQuery.generateFilterCondition(
					TableConstants.PARTITION_KEY, QueryComparisons.EQUAL,
					splitVector[priorityIndex.get(0).getDimension()]);

			// Create a filter condition where the row key is less than the
			// letter "E".
			String rowFilter = TableQuery.generateFilterCondition(
					TableConstants.ROW_KEY, QueryComparisons.LESS_THAN,
					splitVector[priorityIndex.get(1).getDimension()]);

			// Combine the two conditions into a filter expression.
			String combinedFilter = TableQuery.combineFilters(partitionFilter,
					Operators.AND, rowFilter);

			TableQuery<GlobalDescriptorVectorEntity> rangeQuery = TableQuery
					.from(datasetName + "ordered",
							GlobalDescriptorVectorEntity.class).where(combinedFilter);

			for(GlobalDescriptorVectorEntity tempEntity :tableClient.execute(rangeQuery)) {
				entitiesList.add(tempEntity);
			}

		} catch (InvalidKeyException | URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return entitiesList;
	}

	private static DescriptorVectorEntity retrieveDescriptorVector(
			int descriptorVectorId) {
		// Retrieve storage account from connection-string
		CloudStorageAccount storageAccount;
		DescriptorVectorEntity entity = null;
		try {
			storageAccount = CloudStorageAccount.parse(storageConnectionString);
			// Create the table client.
			CloudTableClient tableClient = storageAccount
					.createCloudTableClient();

			TableOperation retrieveEntity = TableOperation.retrieve(
					datasetName, Integer.toString(descriptorVectorId),
					DescriptorVectorEntity.class);
			entity = tableClient.execute(datasetName, retrieveEntity)
					.getResultAsType();

		} catch (InvalidKeyException | URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (StorageException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return entity;
	}

	private static void retrieveThePriorityIndexer() {
		// Retrieve storage account from connection-string
		CloudStorageAccount storageAccount;
		try {
			storageAccount = CloudStorageAccount.parse(storageConnectionString);
			// Create the table client.
			CloudTableClient tableClient = storageAccount
					.createCloudTableClient();

			TableOperation retrieveEntity = TableOperation.retrieve(
					datasetName, datasetName, PriorityIndexTableEntity.class);
			PriorityIndexTableEntity entity = tableClient.execute(
					priorityIndexTable, retrieveEntity).getResultAsType();

			// parse json string
			Object obj = JSONValue.parse(entity.getPriorityIndexJson());
			JSONArray array = (JSONArray) obj;
			for (int i = 0; i < array.size(); i++) {
				priorityIndex.add((PriorityIndexValue) array.get(i));
			}

		} catch (InvalidKeyException | URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (StorageException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static void initialize() {
		// Retrieve storage account from connection-string
		CloudStorageAccount storageAccount;
		try {
			storageAccount = CloudStorageAccount.parse(storageConnectionString);
			// Create the queue client
			CloudQueueClient queueClient = storageAccount
					.createCloudQueueClient();

			// Retrieve a reference to a queue
			queue = queueClient.getQueueReference(insertionQueue);

		} catch (InvalidKeyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (StorageException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
